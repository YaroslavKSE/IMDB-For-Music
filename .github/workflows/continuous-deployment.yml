name: Continuous Deployment Pipeline

on:
  workflow_run:
    workflows:
      - Build Frontend Application
      - Build Music Catalog Service
      - Build User Service
      - Build Music Interaction Service
    types:
      - completed
    branches:
      - development

  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, frontend, music-catalog, user-service, music-interaction)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - music-catalog
          - user-service
          - music-interaction

env:
  EC2_INSTANCE_ID: i-06c5b6c0c7c8e1c22
  DEPLOY_DIR: /home/ec2-user/deploy

jobs:
  determine-service:
    name: Determine Service to Deploy
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'development'
    outputs:
      service: ${{ steps.set-service.outputs.service }}
    steps:
      - name: Set service based on workflow
        id: set-service
        run: |
          WORKFLOW="${{ github.event.workflow_run.name }}"
          if [[ "$WORKFLOW" == "Build Frontend Application" ]]; then
            echo "service=frontend" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW" == "Build Music Catalog Service" ]]; then
            echo "service=music-catalog-service" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW" == "Build User Service" ]]; then
            echo "service=user-service" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW" == "Build Music Interaction Service" ]]; then
            echo "service=music-interaction-service" >> $GITHUB_OUTPUT
          else
            echo "service=unknown" >> $GITHUB_OUTPUT
          fi

  deploy-service:
    name: Deploy Service to EC2
    runs-on: ubuntu-latest
    needs: determine-service
    if: >
      github.event_name == 'workflow_run' &&
      needs.determine-service.outputs.service != 'unknown'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy via SSM (CI deploy)
        run: |
          # Set the SERVICE variable from the previous job output
          SERVICE="${{ needs.determine-service.outputs.service }}"
          
          # Substitute variables in the external script and write out deploy.sh
          envsubst < workflows/scripts/dev_env/deploy.sh > deploy.sh
          
          # Make the deployment script executable
          chmod +x deploy.sh
          
          # Send the script content to the EC2 instance via AWS SSM
          aws ssm send-command \
            --instance-ids ${EC2_INSTANCE_ID} \
            --document-name "AWS-RunShellScript" \
            --parameters commands="$(cat deploy.sh)" \
            --output text \
            --query "Command.CommandId" > command-id.txt
          
          # Get the command ID and wait for the command to complete
          COMMAND_ID=$(cat command-id.txt)
          echo "Waiting for deployment command to complete..."
          status="InProgress"
          while [ "$status" = "InProgress" ]; do
            sleep 5
            status=$(aws ssm get-command-invocation --instance-ids ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "Status" --output text)
            echo "Deployment status: $status"
          done
          
          # Display the command output
          aws ssm get-command-invocation --instance-ids ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "StandardOutputContent" --output text

  manual-deploy:
    name: Manual Deploy to EC2
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy via SSM (Manual deploy)
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          
          if [ "$SERVICE" == "all" ]; then
            # Use the external script for deploying all services
            envsubst < workflows/scripts/dev_env/deploy-all-services.sh > deploy.sh
          else
            # Map the input service to the actual docker-compose service name
            if [ "$SERVICE" == "music-catalog" ]; then
              ACTUAL_SERVICE="music-catalog-service"
            elif [ "$SERVICE" == "user-service" ]; then
              ACTUAL_SERVICE="user-service"
            elif [ "$SERVICE" == "music-interaction" ]; then
              ACTUAL_SERVICE="music-interaction-service"
            else
              ACTUAL_SERVICE="$SERVICE"
            fi
            export ACTUAL_SERVICE
            # Use the external script for deploying a specific service
            envsubst < workflows/scripts/dev_env/deploy-specific-service.sh > deploy.sh
          fi
          
          # Make the deployment script executable
          chmod +x deploy.sh
          
          # Send the script content to the EC2 instance via AWS SSM
          aws ssm send-command \
            --instance-ids ${EC2_INSTANCE_ID} \
            --document-name "AWS-RunShellScript" \
            --parameters commands="$(cat deploy.sh)" \
            --output text \
            --query "Command.CommandId" > command-id.txt
          
          # Get the command ID and wait for the command to complete
          COMMAND_ID=$(cat command-id.txt)
          echo "Waiting for deployment command to complete..."
          status="InProgress"
          while [ "$status" = "InProgress" ]; do
            sleep 5
            status=$(aws ssm get-command-invocation --instance-ids ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "Status" --output text)
            echo "Deployment status: $status"
          done
          
          # Display the command output
          aws ssm get-command-invocation --instance-ids ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "StandardOutputContent" --output text
