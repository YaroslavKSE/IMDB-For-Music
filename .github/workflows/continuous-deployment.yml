# For the manual-deploy job:
- name: Deploy via SSM (Manual deploy)
  run: |
    SERVICE="${{ github.event.inputs.service }}"
    
    # Map the input service to the actual docker-compose service name if needed
    if [ "$SERVICE" == "music-catalog" ]; then
      ACTUAL_SERVICE="music-catalog-service"
    elif [ "$SERVICE" == "user-service" ]; then
      ACTUAL_SERVICE="user-service"
    elif [ "$SERVICE" == "music-interaction" ]; then
      ACTUAL_SERVICE="music-interaction-service"
    else
      ACTUAL_SERVICE="$SERVICE"
    fi
    
    # Execute the appropriate remote script based on service selection
    if [ "$SERVICE" == "all" ]; then
      COMMAND="cd ${SCRIPTS_DIR} && ./deploy-all.sh ${DEPLOY_DIR}"
    else
      COMMAND="cd ${SCRIPTS_DIR} && ./deploy-service.sh ${ACTUAL_SERVICE} ${DEPLOY_DIR}"
    fi
    
    # Send the command to the EC2 instance via AWS SSM
    aws ssm send-command \
      --instance-id ${EC2_INSTANCE_ID} \
      --document-name "AWS-RunShellScript" \
      --parameters "{\"commands\":[\"${COMMAND}\"]}" \
      --output text \
      --query "Command.CommandId" > command-id.txt
    
    # Get the command ID and wait for the command to complete
    COMMAND_ID=$(cat command-id.txt)
    echo "Waiting for deployment command to complete..."
    status="InProgress"
    while [ "$status" = "InProgress" ]; do
      sleep 5
      status=$(aws ssm get-command-invocation --instance-id ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "Status" --output text)
      echo "Deployment status: $status"
    done
    
    # Display the command output
    aws ssm get-command-invocation --instance-id ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "StandardOutputContent" --output text

# For the deploy-service job:
- name: Deploy via SSM (CI deploy)
  run: |
    # Set the SERVICE variable from the previous job output
    SERVICE="${{ needs.determine-service.outputs.service }}"
    
    # Execute the remote deploy script with the appropriate service name
    aws ssm send-command \
      --instance-id ${EC2_INSTANCE_ID} \
      --document-name "AWS-RunShellScript" \
      --parameters '{"commands":["cd ${SCRIPTS_DIR} && ./deploy-service.sh ${SERVICE} ${DEPLOY_DIR}"]}' \
      --output text \
      --query "Command.CommandId" > command-id.txt
    
    # Get the command ID and wait for the command to complete
    COMMAND_ID=$(cat command-id.txt)
    echo "Waiting for deployment command to complete..."
    status="InProgress"
    while [ "$status" = "InProgress" ]; do
      sleep 5
      status=$(aws ssm get-command-invocation --instance-id ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "Status" --output text)
      echo "Deployment status: $status"
    done
    
    # Display the command output
    aws ssm get-command-invocation --instance-id ${EC2_INSTANCE_ID} --command-id $COMMAND_ID --query "StandardOutputContent" --output text