name: Build Music Interaction Service

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'backend/MusicInteraction/**'
      - '.github/workflows/build-music-interaction-service.yml'
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Semantic version increment (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

env:
  REGISTRY: ghcr.io
  ORGANIZATION: ${{ github.repository_owner }}
  SERVICE_NAME: music-interaction-service
  SERVICE_DIR: backend/MusicInteraction
  VERSION_FILE: backend/MusicInteraction/VERSION

jobs:
  build-and-publish:
    name: Build and Publish Music Interaction Service
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Read or create version file
      - name: Read Version File
        id: read_version
        run: |
          if [ -f "${{ env.VERSION_FILE }}" ]; then
            echo "Current version: $(cat ${{ env.VERSION_FILE }})"
            echo "current_version=$(cat ${{ env.VERSION_FILE }})" >> $GITHUB_OUTPUT
          else
            echo "0.1.0" > ${{ env.VERSION_FILE }}
            echo "Current version: 0.1.0"
            echo "current_version=0.1.0" >> $GITHUB_OUTPUT
          fi

      # Determine branch type and set appropriate tags
      - name: Set Tags
        id: set_tags
        run: |
          # Convert organization name to lowercase for Docker compatibility
          ORG_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            # Dev branch tagging
            DATE_TAG="dev-$(date +'%Y%m%d-%H%M')"
            TAGS="${{ env.REGISTRY }}/$ORG_LOWER/${{ env.SERVICE_NAME }}:dev,${{ env.REGISTRY }}/$ORG_LOWER/${{ env.SERVICE_NAME }}:latest,${{ env.REGISTRY }}/$ORG_LOWER/${{ env.SERVICE_NAME }}:$DATE_TAG"
          else
            # Parse current version
            IFS='.' read -r major minor patch <<< "${{ steps.read_version.outputs.current_version }}"
            
            # Determine increment type
            INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
            
            # Increment version according to semantic versioning
            case "$INCREMENT_TYPE" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac
            
            NEW_VERSION="${major}.${minor}.${patch}"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
            TAGS="${{ env.REGISTRY }}/$ORG_LOWER/${{ env.SERVICE_NAME }}:v$NEW_VERSION,${{ env.REGISTRY }}/$ORG_LOWER/${{ env.SERVICE_NAME }}:latest"
            
            # Update version file
            echo "$NEW_VERSION" > ${{ env.VERSION_FILE }}
          fi
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      # Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_DIR }}
          push: true
          tags: ${{ steps.set_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Commit version file change and create tag for main branch
      - name: Commit Version Change and Create Tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add ${{ env.VERSION_FILE }}
          git commit -m "Bump ${{ env.SERVICE_NAME }} version to ${{ steps.set_tags.outputs.new_version }}"
          
          # Create annotated tag
          git tag -a "${{ env.SERVICE_NAME }}-v${{ steps.set_tags.outputs.new_version }}" -m "Release ${{ env.SERVICE_NAME }} v${{ steps.set_tags.outputs.new_version }}"
          
          # Push both commit and tag
          git push origin HEAD:${{ github.ref_name }}
          git push origin "${{ env.SERVICE_NAME }}-v${{ steps.set_tags.outputs.new_version }}"