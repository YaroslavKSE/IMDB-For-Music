// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicLists.Infrastructure.DBConfig;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicLists.Infrastructure.Migrations
{
    [DbContext(typeof(MusicListsDbContext))]
    [Migration("20250421180706_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListCommentEntity", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommentId");

                    b.HasIndex("ListId");

                    b.HasIndex("UserId");

                    b.HasIndex("ListId", "CommentedAt");

                    b.ToTable("ListComments");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListEntity", b =>
                {
                    b.Property<Guid>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("HotScore")
                        .HasColumnType("real");

                    b.Property<bool>("IsRanked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScoreDirty")
                        .HasColumnType("boolean");

                    b.Property<string>("ListDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ListId");

                    b.HasIndex("HotScore");

                    b.HasIndex("IsScoreDirty");

                    b.HasIndex("UserId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListItemEntity", b =>
                {
                    b.Property<Guid>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ListItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ListId");

                    b.ToTable("ListItems");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListLikeEntity", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LikeId");

                    b.HasIndex("ListId");

                    b.HasIndex("UserId");

                    b.HasIndex("ListId", "UserId")
                        .IsUnique();

                    b.ToTable("ListLikes");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListCommentEntity", b =>
                {
                    b.HasOne("MusicLists.Infrastructure.Entities.ListEntity", "List")
                        .WithMany("Comments")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListItemEntity", b =>
                {
                    b.HasOne("MusicLists.Infrastructure.Entities.ListEntity", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListLikeEntity", b =>
                {
                    b.HasOne("MusicLists.Infrastructure.Entities.ListEntity", "List")
                        .WithMany("Likes")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("MusicLists.Infrastructure.Entities.ListEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Items");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
